# -*- coding: utf-8 -*-
"""DistributedTask1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GdGfsl2sAvWquJrxqcIlGh3NEEmGtlWM
"""

from functools import reduce


def read_dataset(file_path):
    """
    read dataset function which reads the file and splits every coma
    """
    with open(file_path, 'r') as file:
        return [line.strip().split(', ') for line in file]


def mapper_task1(record):
    """
    mapper function it extracts the course name and grade and returns as a tuple and will be used in the mapreduce process
    """
    course, grade = record[1], int(record[2])
    return (course, grade)

def reducer_task1(course, grades):
    """
    reducer function takes the course name and list of grades and finds the average grade by dividing the sum by the number and retuns a tuple
    """
    return (course, sum(grades) / len(grades))


def mapper_task2(record):
    """
    mapper function it extracts the university name and grade and returns it as a tuple
    """
    university, grade = record[3], int(record[2])
    return (university, grade)

def reducer_task2(university, grades):
    """
    reducer function takes a university name and grades and find the average
    """
    return (university, sum(grades) / len(grades))


def mapper_task3(record):
    """
    mapper function extracts the year and the grade and returns as a tuple
    """
    year, grade = record[0], int(record[2])
    return (year, grade)

def reducer_task3(year, grades):
    """
    reducer function it sorts the list of grades in descending order then extracts the top 3 grades and returns a tuple with year and the top 3 grades
    """
    sorted_grades = sorted(grades, reverse=True)
    return (year, sorted_grades[:3])


def map_reduce(data, mapper, reducer):
    """
    mapreduce function iterates over the data calls the mapper method which returns a tuple
    stores value in a dictionary
    then the reducer phase stores the reduced output in the result dictionary and returns the result
    """
    intermediate = {}
    for record in data:
        key, value = mapper(record)
        if key not in intermediate:
            intermediate[key] = []
        intermediate[key].append(value)

    result = {}
    for key, values in intermediate.items():
        result[key] = reducer(key, values)

    return result


data = read_dataset('/content/coursegrades.txt')


task1 = map_reduce(data, mapper_task1, reducer_task1)
print("Task 1: Average Grade per Course")
for course, avg_grade in task1.items():
    print(f"{course}, {avg_grade}")

task2 = map_reduce(data, mapper_task2, reducer_task2)
print("\ntask 2: Average Grade per University")
for university, avg_grade in task2.items():
    print(f"{university}, {avg_grade}")

task3 = map_reduce(data, mapper_task3, reducer_task3)
print("\ntask3: Top 3 Highest Grades per Year")
for year, top_grades in task3.items():
    print(f"{year}, {top_grades}")